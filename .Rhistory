oridf = df
para = list(interactions=F, int_term=2, ncomp=5, intercept=T, out_type="continuous", outcome_var="y")
output = AIFS::stdwrap(df_p = df, std_techlist = "lasso", sp=para, list_size = 15, maxiter = 100, run = 20, pop = 200)
output$selfeatperf = list()
for(i in c("F1", "AUC", "Accuracy")){
output$selfeatperf[[i]] = sfperf(score = i, selfeat = output$feature[-1], tarnumb = 10, varnum = varnum, int = F)
}
return(output)
})
res_std = pbapply::pblapply(1:1, function(seeder){
varnum=50
covariate= c(1)
main_var = 10
dataset=function(varnum, setting="No_Correlation", var=c("Mar", "No_Mar", "No_Var"), seed=2, main_var=10, var_effect=0.5, correlation_var=15, correlation_val=5, high_dim=T, train_sample=500)
df = dataset(varnum = varnum, setting = "Correlation", var = "onlyMar", seed=seeder, main_var=main_var, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50)
oridf = df
para = list(interactions=F, int_term=2, ncomp=5, intercept=T, out_type="continuous", outcome_var="y")
output = AIFS::stdwrap(df_p = df, std_techlist = "lasso", sp=para, list_size = 15, maxiter = 100, run = 20, pop = 200)
output$selfeatperf = list()
for(i in c("F1", "AUC", "Accuracy")){
output$selfeatperf[[i]] = sfperf(score = i, selfeat = output$feature[-1], tarnumb = 10, varnum = varnum, int = F)
}
return(output)
})
res_std = pbapply::pblapply(1:1, function(seeder){
varnum=50
covariate= c(1)
main_var = 10
dataset=function(varnum, setting="No_Correlation", var=c("Mar", "No_Mar", "No_Var"), seed=2, main_var=10, var_effect=0.5, correlation_var=15, correlation_val=5, high_dim=T, train_sample=500)
df = dataset(varnum = varnum, setting = "Correlation", var = "onlyMar", seed=seeder, main_var=main_var, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50)
oridf = df
str(df)
para = list(interactions=F, int_term=2, ncomp=5, intercept=T, out_type="continuous", outcome_var="y")
output = AIFS::stdwrap(df_p = df, std_techlist = "lasso", sp=para, list_size = 15, maxiter = 100, run = 20, pop = 200)
output$selfeatperf = list()
for(i in c("F1", "AUC", "Accuracy")){
output$selfeatperf[[i]] = sfperf(score = i, selfeat = output$feature[-1], tarnumb = 10, varnum = varnum, int = F)
}
return(output)
})
res_std = pbapply::pblapply(1:1, function(seeder){
varnum=50
covariate= c(1)
main_var = 10
df = dataset(varnum = varnum, setting = "Correlation", var = "onlyMar", seed=seeder, main_var=main_var, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50)
oridf = df
str(df)
para = list(interactions=F, int_term=2, ncomp=5, intercept=T, out_type="continuous", outcome_var="y")
output = AIFS::stdwrap(df_p = df, std_techlist = "lasso", sp=para, list_size = 15, maxiter = 100, run = 20, pop = 200)
output$selfeatperf = list()
for(i in c("F1", "AUC", "Accuracy")){
output$selfeatperf[[i]] = sfperf(score = i, selfeat = output$feature[-1], tarnumb = 10, varnum = varnum, int = F)
}
return(output)
})
res_std
### GAFS
res_gafs = pbapply::pblapply(1:1, function(seeder){
varnum=50
covariate= c(1)
main_var = 10
df = dataset(varnum = varnum, setting = "Correlation", var = "onlyMar", seed=seeder, main_var=main_var, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50)
oridf = df
para = list(interactions=F, int_term=2, ncomp=5, intercept=T, out_type="continuous", outcome_var="y")
output = AIFS::aiwrafs(df_p = df, std_techlist = "lasso", sp=para, list_size = 15, maxiter = 100, run = 20, pop = 200, ml_tech = c("rf"),Best_Para_train = rep(1,6), updatePPM = T, dr_tech = c("No_DR"))
output$selfeatperf = list()
for(i in c("F1", "AUC", "Accuracy")){
output$selfeatperf[[i]] = sfperf(score = i, selfeat = output$feature[-1], tarnumb = 10, varnum = varnum, int = F)
}
return(output)
})
### Wrapper
res_std = pbapply::pblapply(1:1, function(seeder){
varnum=50
covariate= c(1)
main_var = 10
df = dataset(varnum = varnum, setting = "Correlation", var = "onlyMar", seed=seeder, main_var=main_var, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50)
oridf = df
para = list(interactions=F, int_term=2, ncomp=5, intercept=T, out_type="continuous", outcome_var="y")
output = AIFS::stdwrap(df_p = df, std_techlist = "lasso", sp=para, list_size = 15, maxiter = 100, run = 20, pop = 200)
output$selfeatperf = list()
for(i in c("F1", "AUC", "Accuracy")){
output$selfeatperf[[i]] = sfperf(score = i, selfeat = output$feature[-1], tarnumb = 10, varnum = varnum, int = F)
}
return(output)
})
devtools::document()
devtools::build()
install.packages("praznik")
devtools::document()
main_fun()
main_fun
devtools::document()
devtools::build()
## Simulated Data: p50,n50, no int
### GAFS
res_gafs = pbapply::pblapply(1:1, function(seeder){
varnum=50
covariate= c(1)
main_var = 10
df = AIFS::dataset(varnum = varnum, setting = "Correlation", var = "onlyMar", seed=seeder, main_var=main_var, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50)
oridf = df
para = list(interactions=F, int_term=2, ncomp=5, intercept=T, out_type="continuous", outcome_var="y")
output = AIFS::aiwrafs(df_p = df, std_techlist = "lasso", sp=para, list_size = 15, maxiter = 100, run = 20, pop = 200, ml_tech = c("ridge"),Best_Para_train = rep(1,6), updatePPM = T, dr_tech = c("No_DR"))
output$selfeatperf = list()
for(i in c("F1", "AUC", "Accuracy")){
output$selfeatperf[[i]] = AIFS:::sfperf(score = i, selfeat = output$feature[-1], tarnumb = 10, varnum = varnum, int = F)
}
return(output)
})
devtools::document()
devtools::document()
## Simulated Data: p50,n50, no int
### GAFS
res_gafs = pbapply::pblapply(1:1, function(seeder){
varnum=50
covariate= c(1)
main_var = 10
df = AIFS::dataset(varnum = varnum, setting = "Correlation", var = "onlyMar", seed=seeder, main_var=main_var, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50)
oridf = df
para = list(interactions=F, int_term=2, ncomp=5, intercept=T, out_type="continuous", outcome_var="y")
output = aiwrafs(df_p = df, std_techlist = "lasso", sp=para, list_size = 15, maxiter = 100, run = 20, pop = 200, ml_tech = c("ridge"),Best_Para_train = rep(1,6), updatePPM = T, dr_tech = c("No_DR"))
#AIFS::
output$selfeatperf = list()
for(i in c("F1", "AUC", "Accuracy")){
output$selfeatperf[[i]] = AIFS:::sfperf(score = i, selfeat = output$feature[-1], tarnumb = 10, varnum = varnum, int = F)
}
return(output)
})
devtools::document()
## Simulated Data: p50,n50, no int
### GAFS
res_gafs = pbapply::pblapply(1:1, function(seeder){
varnum=50
covariate= c(1)
main_var = 10
df = AIFS::dataset(varnum = varnum, setting = "Correlation", var = "onlyMar", seed=seeder, main_var=main_var, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50)
oridf = df
para = list(interactions=F, int_term=2, ncomp=5, intercept=T, out_type="continuous", outcome_var="y")
output = aiwrafs(df_p = df, std_techlist = "lasso", sp=para, list_size = 15, maxiter = 100, run = 20, pop = 200, ml_tech = c("ridge"),Best_Para_train = rep(1,6), updatePPM = T, dr_tech = c("No_DR"))
#AIFS::
output$selfeatperf = list()
for(i in c("F1", "AUC", "Accuracy")){
output$selfeatperf[[i]] = AIFS:::sfperf(score = i, selfeat = output$feature[-1], tarnumb = 10, varnum = varnum, int = F)
}
return(output)
})
devtools::document()
varnum=50
covariate= c(1)
main_var = 10
df = AIFS::dataset(varnum = varnum, setting = "Correlation", var = "onlyMar", seed=1, main_var=main_var, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50)
oridf = df
para = list(interactions=F, int_term=2, ncomp=5, intercept=T, out_type="continuous", outcome_var="y")
output = aiwrafs(df_p = df, std_techlist = "lasso", sp=para, list_size = 15, maxiter = 100, run = 20, pop = 200, ml_tech = c("ridge"),Best_Para_train = rep(1,6), updatePPM = T, dr_tech = c("No_DR"))
output
ml <<- ML_funct(ml_tech = "ridge", df=output[[1]], seed=2)
para = stdalgo::para_control(interactions = F, int_term = 2, ncomp = 5, intercept = T, out_type = "continuous")
f= stdalgo::HDSI_formula_gen(other_para=para)
f
f= as.formula(paste(names(df)[ncol(df)], "~."))
f
devtools::document()
ml <<- ML_funct(ml_tech = "ridge", df=output[[1]], seed=2)
ml <<- ML_funct(ml_tech = "ridge", df=output[[1]], seed=2)
str(ml$mse)
ridge_mod = function(df, outvar){
Matrix= model.matrix( ~ ., !df[,-ncol(df)])[, -1]
Y=as.matrix(df[,ncol(df)])
set.seed(1)
fit = glmnet::cv.glmnet(Matrix, Y, alpha=alpha, standardize=F, family="gaussian", penalty.factor = penalty) # get optimum lambda
lambda.1se=fit$lambda.1se
lambda.min=fit$lambda.min
set.seed(1)
model = glmnet::glmnet(Matrix, Y, lambda = lambda.1se, alpha=alpha, standardize=F, family="gaussian", penalty.factor = penalty)
return(model)
}
devtools::document()
str(df)
ridge_mod = function(df, outvar){
Matrix= model.matrix( ~ ., !df[,-ncol(df)])[, -1]
Y=as.matrix(df[,ncol(df)])
set.seed(1)
fit = glmnet::cv.glmnet(Matrix, Y, alpha=alpha, standardize=F, family="gaussian", penalty.factor = penalty) # get optimum lambda
lambda.1se=fit$lambda.1se
lambda.min=fit$lambda.min
set.seed(1)
model = glmnet::glmnet(Matrix, Y, lambda = lambda.1se, alpha=alpha, standardize=F, family="gaussian", penalty.factor = penalty)
return(model)
}
ml <<- ML_funct(ml_tech = "ridge", df=output[[1]], seed=2)
devtools::document()
rm(list = c("ridge_mod"))
devtools::document()
ml <<- ML_funct(ml_tech = "ridge", df=output[[1]], seed=2)
### Perform ML Training
ridge_mod = function(df, outvar){
print("Enter Ridge")
Matrix= model.matrix( ~ ., df[,-ncol(df)])[, -1]
Y=as.matrix(df[,ncol(df)])
set.seed(1)
fit = glmnet::cv.glmnet(Matrix, Y, alpha=alpha, standardize=F, family="gaussian", penalty.factor = penalty) # get optimum lambda
lambda.1se=fit$lambda.1se
lambda.min=fit$lambda.min
set.seed(1)
model = glmnet::glmnet(Matrix, Y, lambda = lambda.1se, alpha=alpha, standardize=F, family="gaussian", penalty.factor = penalty)
return(model)
}
ml <<- ML_funct(ml_tech = "ridge", df=output[[1]], seed=2)
devtools::document()
rm(list = c("ridge_mod"))
devtools::document()
ml <<- ML_funct(ml_tech = "ridge", df=output[[1]], seed=2)
devtools::document()
ml <<- ML_funct(ml_tech = "ridge", df=output[[1]], seed=2)
ml
pl = predict_function(df = output[[1]], ml_model = ml, ml_tech = c("ridge"))
predict_function = function(df, ml_model, ml_tech = c("mlp", "slp", "rf")){
# Convert to dataframe
if(class(df) != "data.frame"){
#print("Enter")
if(class(df) == "list"){
df=do.call(rbind, df)
}
df = data.frame(df)
}
#str(df)
if(ml_tech == "mlp"){
if(is.null(ml_model$weights)){predicted = NA} #cat(T);
else{predicted = neuralnet:::predict.nn(ml_model,newdata = df)}
}
else if(ml_tech == "slp"){predicted = validann:::predict.ann(ml_model,newdata = df)}
else if(ml_tech == "ridge"){
outvar = names(df)[ncol(df)]
df_output=stdalgo::df_creator(covariate = c(1), df=df, f=f, outcome = outvar)
variable_list=setdiff(names(df_output[[2]]), c(outvar))
if(length((variable_list)) > 1){
Matrix= model.matrix( ~ ., df_output[[2]][,variable_list])[, -1]
}
else{
newdf = data.frame(df_output[[2]][,variable_list])
names(newdf) = variable_list
Matrix= model.matrix( ~ ., newdf)[,-1]}
if(length(variable_list)==1){Matrix=cbind(0, Matrix)}
predicted = predict(ml_model,Matrix)
}
else{predicted = randomForest:::predict.randomForest(ml_model,newdata = df)}
return(predicted)
}
pl = predict_function(df = output[[1]], ml_model = ml, ml_tech = c("ridge"))
pl
pl = predict_function(df = output[[1]][1,], ml_model = ml, ml_tech = c("ridge"))
pl
ml <<- ML_funct(ml_tech = "rf", df=output[[1]], seed=2)
pl = predict_function(df = output[[1]][1,], ml_model = ml, ml_tech = c("rf"))
pl
str(pl)
ml <<- ML_funct(ml_tech = "ridge", df=output[[1]], seed=2)
pl = predict_function(df = output[[1]][1,], ml_model = ml, ml_tech = c("ridge"))
str(pl)
devtools::document()
rm(list = c("predict_function"))
devtools::document()
## Simulated Data: p50,n50, no int
### GAFS
res_gafs = pbapply::pblapply(1:1, function(seeder){
varnum=50
covariate= c(1)
main_var = 10
df = AIFS::dataset(varnum = varnum, setting = "Correlation", var = "onlyMar", seed=seeder, main_var=main_var, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50)
oridf = df
para = list(interactions=F, int_term=2, ncomp=5, intercept=T, out_type="continuous", outcome_var="y")
output = aiwrafs(df_p = df, std_techlist = "lasso", sp=para, list_size = 15, maxiter = 100, run = 20, pop = 200, ml_tech = c("ridge"),Best_Para_train = rep(1,6), updatePPM = T, dr_tech = c("No_DR"))
#AIFS::
output$selfeatperf = list()
for(i in c("F1", "AUC", "Accuracy")){
output$selfeatperf[[i]] = AIFS:::sfperf(score = i, selfeat = output$feature[-1], tarnumb = 10, varnum = varnum, int = F)
}
return(output)
})
res_gafs
devtools::document()
## Simulated Data: p50,n50, no int
### GAFS
res_gafs = pbapply::pblapply(1:1, function(seeder){
varnum=50
covariate= c(1)
main_var = 10
df = AIFS::dataset(varnum = varnum, setting = "Correlation", var = "onlyMar", seed=seeder, main_var=main_var, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50)
oridf = df
para = list(interactions=F, int_term=2, ncomp=5, intercept=T, out_type="continuous", outcome_var="y")
output = aiwrafs(df_p = df, std_techlist = "lasso", sp=para, list_size = 15, maxiter = 100, run = 20, pop = 200, ml_tech = c("ridge"),Best_Para_train = rep(1,6), updatePPM = T, dr_tech = c("No_DR"))
#AIFS::
output$selfeatperf = list()
for(i in c("F1", "AUC", "Accuracy")){
output$selfeatperf[[i]] = AIFS:::sfperf(score = i, selfeat = output$feature[-1], tarnumb = 10, varnum = varnum, int = F)
}
return(output)
})
devtools::document()
## Simulated Data: p50,n50, no int
### GAFS
res_gafs = pbapply::pblapply(1:1, function(seeder){
varnum=50
covariate= c(1)
main_var = 10
df = AIFS::dataset(varnum = varnum, setting = "Correlation", var = "onlyMar", seed=seeder, main_var=main_var, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50)
oridf = df
para = list(interactions=F, int_term=2, ncomp=5, intercept=T, out_type="continuous", outcome_var="y")
output = aiwrafs(df_p = df, std_techlist = "lasso", sp=para, list_size = 15, maxiter = 100, run = 20, pop = 200, ml_tech = c("ridge"),Best_Para_train = rep(1,6), updatePPM = T, dr_tech = c("No_DR"))
#AIFS::
output$selfeatperf = list()
for(i in c("F1", "AUC", "Accuracy")){
output$selfeatperf[[i]] = AIFS:::sfperf(score = i, selfeat = output$feature[-1], tarnumb = 10, varnum = varnum, int = F)
}
return(output)
})
devtools::document()
## Simulated Data: p50,n50, no int
### GAFS
res_gafs = pbapply::pblapply(1:1, function(seeder){
varnum=50
covariate= c(1)
main_var = 10
df = AIFS::dataset(varnum = varnum, setting = "Correlation", var = "onlyMar", seed=seeder, main_var=main_var, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50)
oridf = df
para = list(interactions=F, int_term=2, ncomp=5, intercept=T, out_type="continuous", outcome_var="y")
output = aiwrafs(df_p = df, std_techlist = "lasso", sp=para, list_size = 15, maxiter = 100, run = 20, pop = 200, ml_tech = c("ridge"),Best_Para_train = rep(1,6), updatePPM = T, dr_tech = c("No_DR"))
#AIFS::
output$selfeatperf = list()
for(i in c("F1", "AUC", "Accuracy")){
output$selfeatperf[[i]] = AIFS:::sfperf(score = i, selfeat = output$feature[-1], tarnumb = 10, varnum = varnum, int = F)
}
return(output)
})
predict_function = function(df, ml_model, ml_tech = c("mlp", "slp", "rf")){
# Convert to dataframe
if(class(df) != "data.frame"){
#print("Enter")
if(class(df) == "list"){
df=do.call(rbind, df)
}
df = data.frame(df)
}
#str(df)
if(ml_tech == "mlp"){
if(is.null(ml_model$weights)){predicted = NA} #cat(T);
else{predicted = neuralnet:::predict.nn(ml_model,newdata = df)}
}
else if(ml_tech == "slp"){predicted = validann:::predict.ann(ml_model,newdata = df)}
else if(ml_tech == "ridge"){
str(df)
outvar = names(df)[ncol(df)]
df_output=stdalgo::df_creator(covariate = c(1), df=df, f=f, outcome = outvar)
variable_list=setdiff(names(df_output[[2]]), c(outvar))
if(length((variable_list)) > 1){
Matrix= model.matrix( ~ ., df_output[[2]][,variable_list])[, -1]
}
else{
newdf = data.frame(df_output[[2]][,variable_list])
names(newdf) = variable_list
Matrix= model.matrix( ~ ., newdf)[,-1]}
if(length(variable_list)==1){Matrix=cbind(0, Matrix)}
predicted = as.numeric(predict(ml_model,Matrix))
}
else{predicted = randomForest:::predict.randomForest(ml_model,newdata = df)}
return(predicted)
}
devtools::document()
rm(list = c("predict_function"))
devtools::document()
predict_function = function(df, ml_model, ml_tech = c("mlp", "slp", "rf")){
# Convert to dataframe
if(class(df) != "data.frame"){
#print("Enter")
if(class(df) == "list"){
df=do.call(rbind, df)
}
df = data.frame(df)
}
#str(df)
if(ml_tech == "mlp"){
if(is.null(ml_model$weights)){predicted = NA} #cat(T);
else{predicted = neuralnet:::predict.nn(ml_model,newdata = df)}
}
else if(ml_tech == "slp"){predicted = validann:::predict.ann(ml_model,newdata = df)}
else if(ml_tech == "ridge"){
str(df)
outvar = names(df)[ncol(df)]
df_output=stdalgo::df_creator(covariate = c(1), df=df, f=f, outcome = outvar)
variable_list=setdiff(names(df_output[[2]]), c(outvar))
if(length((variable_list)) > 1){
Matrix= model.matrix( ~ ., df_output[[2]][,variable_list])[, -1]
}
else{
newdf = data.frame(df_output[[2]][,variable_list])
names(newdf) = variable_list
Matrix= model.matrix( ~ ., newdf)[,-1]}
if(length(variable_list)==1){Matrix=cbind(0, Matrix)}
predicted = as.numeric(predict(ml_model,Matrix))
}
else{predicted = randomForest:::predict.randomForest(ml_model,newdata = df)}
return(predicted)
}
rm(list = c("predict_function"))
devtools::document()
## Simulated Data: p50,n50, no int
### GAFS
res_gafs = pbapply::pblapply(1:1, function(seeder){
varnum=50
covariate= c(1)
main_var = 10
df = AIFS::dataset(varnum = varnum, setting = "Correlation", var = "onlyMar", seed=seeder, main_var=main_var, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50)
oridf = df
para = list(interactions=F, int_term=2, ncomp=5, intercept=T, out_type="continuous", outcome_var="y")
output = aiwrafs(df_p = df, std_techlist = "lasso", sp=para, list_size = 15, maxiter = 100, run = 20, pop = 200, ml_tech = c("ridge"),Best_Para_train = rep(1,6), updatePPM = T, dr_tech = c("No_DR"))
#AIFS::
output$selfeatperf = list()
for(i in c("F1", "AUC", "Accuracy")){
output$selfeatperf[[i]] = AIFS:::sfperf(score = i, selfeat = output$feature[-1], tarnumb = 10, varnum = varnum, int = F)
}
return(output)
})
devtools::document()
## Simulated Data: p50,n50, no int
### GAFS
res_gafs = pbapply::pblapply(1:1, function(seeder){
varnum=50
covariate= c(1)
main_var = 10
df = AIFS::dataset(varnum = varnum, setting = "Correlation", var = "onlyMar", seed=seeder, main_var=main_var, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50)
oridf = df
para = list(interactions=F, int_term=2, ncomp=5, intercept=T, out_type="continuous", outcome_var="y")
output = aiwrafs(df_p = df, std_techlist = "lasso", sp=para, list_size = 15, maxiter = 100, run = 20, pop = 200, ml_tech = c("ridge"),Best_Para_train = rep(1,6), updatePPM = T, dr_tech = c("No_DR"))
#AIFS::
output$selfeatperf = list()
for(i in c("F1", "AUC", "Accuracy")){
output$selfeatperf[[i]] = AIFS:::sfperf(score = i, selfeat = output$feature[-1], tarnumb = 10, varnum = varnum, int = F)
}
return(output)
})
devtools::document()
## Simulated Data: p50,n50, no int
### GAFS
res_gafs = pbapply::pblapply(1:1, function(seeder){
varnum=50
covariate= c(1)
main_var = 10
df = AIFS::dataset(varnum = varnum, setting = "Correlation", var = "onlyMar", seed=seeder, main_var=main_var, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50)
oridf = df
para = list(interactions=F, int_term=2, ncomp=5, intercept=T, out_type="continuous", outcome_var="y")
output = aiwrafs(df_p = df, std_techlist = "lasso", sp=para, list_size = 15, maxiter = 100, run = 20, pop = 200, ml_tech = c("ridge"),Best_Para_train = rep(1,6), updatePPM = T, dr_tech = c("No_DR"))
#AIFS::
output$selfeatperf = list()
for(i in c("F1", "AUC", "Accuracy")){
output$selfeatperf[[i]] = AIFS:::sfperf(score = i, selfeat = output$feature[-1], tarnumb = 10, varnum = varnum, int = F)
}
return(output)
})
res_gafs
## Simulated Data: p50,n50, no int
### GAFS
res_gafs = pbapply::pblapply(1:1, function(seeder){
varnum=50
covariate= c(1)
main_var = 10
df = AIFS::dataset(varnum = varnum, setting = "Correlation", var = "onlyMar", seed=seeder, main_var=main_var, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50)
oridf = df
para = list(interactions=F, int_term=2, ncomp=5, intercept=T, out_type="continuous", outcome_var="y")
output = AIFS::trainfs(ml_train = T, Best_Para_train= rep(1,6) ,covariate=covariate, sp=para, dr_tech = c("No_DR"), ml_tech = c("rf"), optim_tech = "GA", df_p=df, std_techlist = "lasso", list_size = 15, maxiter = 200, run = 20, pop = 100)
#AIFS::
output$selfeatperf = list()
for(i in c("F1", "AUC", "Accuracy")){
output$selfeatperf[[i]] = AIFS:::sfperf(score = i, selfeat = output$feature[-1], tarnumb = 10, varnum = varnum, int = F)
}
return(output)
})
devtools::document()
future::plan(future::multisession(workers = 10))
## Simulated Data: p50,n50, no int
### GAFS
res_gafs = pbapply::pblapply(1:1, function(seeder){
varnum=50
covariate= c(1)
main_var = 10
df = AIFS::dataset(varnum = varnum, setting = "Correlation", var = "onlyMar", seed=seeder, main_var=main_var, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50)
oridf = df
para = list(interactions=F, int_term=2, ncomp=5, intercept=T, out_type="continuous", outcome_var="y")
output = AIFS::trainfs(ml_train = T, Best_Para_train= rep(1,6) ,covariate=covariate, sp=para, dr_tech = c("No_DR"), ml_tech = c("rf"), optim_tech = "GA", df_p=df, std_techlist = "lasso", list_size = 15, maxiter = 200, run = 20, pop = 100)
#AIFS::
output$selfeatperf = list()
for(i in c("F1", "AUC", "Accuracy")){
output$selfeatperf[[i]] = AIFS:::sfperf(score = i, selfeat = output$feature[-1], tarnumb = 10, varnum = varnum, int = F)
}
return(output)
})
library(AIFS)
res_gafs = pbapply::pblapply(1:1, function(seeder){
varnum=50
covariate= c(1)
main_var = 10
df = AIFS::dataset(varnum = varnum, setting = "Correlation", var = "onlyMar", seed=seeder, main_var=main_var, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50)
oridf = df
para = list(interactions=F, int_term=2, ncomp=5, intercept=T, out_type="continuous", outcome_var="y")
output = AIFS::trainfs(ml_train = T, Best_Para_train= rep(1,6) ,covariate=covariate, sp=para, dr_tech = c("No_DR"), ml_tech = c("rf"), optim_tech = "GA", df_p=df, std_techlist = "lasso", list_size = 15, maxiter = 200, run = 20, pop = 100)
#AIFS::
output$selfeatperf = list()
for(i in c("F1", "AUC", "Accuracy")){
output$selfeatperf[[i]] = AIFS:::sfperf(score = i, selfeat = output$feature[-1], tarnumb = 10, varnum = varnum, int = F)
}
return(output)
})
